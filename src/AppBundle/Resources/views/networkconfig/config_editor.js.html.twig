{% block javascript_grafic_editor %}
    <script src="{{ asset('bundles/app/js/dataInspector.js') }}"></script>
    <script src="{{ asset('bundles/app/js/go-debug.js') }}"></script>
    <script id="code">
            function init() {
                var $ = go.GraphObject.make;  // for conciseness in defining templates
                myDiagram =
                        $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
                                {
                                    initialContentAlignment: go.Spot.Center,
                                    allowDrop: true,  // must be true to accept drops from the Palette
                                    //"LinkDrawn": showLinkLabel,  // this DiagramEvent listener is defined below
                                    //"LinkRelinked": showLinkLabel,
                                    "animationManager.duration": 800, // slightly longer than default (600ms) animation
                                    "undoManager.isEnabled": true  // enable undo & redo
                                    //validCycle: go.Diagram.CycleDestinationTree
                                });

                // when the document is modified, add a "*" to the title and enable the "Save" button
                myDiagram.addDiagramListener("Modified", function(e) {
                    var button = document.getElementById("SaveButton");
                    if (button) button.disabled = !myDiagram.isModified;
                    var idx = document.title.indexOf("*");
                    if (myDiagram.isModified) {
                        if (idx < 0) document.title += "*";
                    } else {
                        if (idx >= 0) document.title = document.title.substr(0, idx);
                    }
                });

                // helper definitions for node templates

                function nodeStyle() {//1
                    return [
                        // The Node.location comes from the "loc" property of the node data,
                        // converted by the Point.parse static method.
                        // If the Node.location is changed, it updates the "loc" property of the node data,
                        // converting back using the Point.stringify static method.
                        {
                            resizable: true,
                            resizeObjectName: "SHAPE"
                        },
                        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                        {
                            // the Node.location is at the center of each node
                            locationSpot: go.Spot.Center,
                            //isShadowed: true,
                            //shadowColor: "#888",
                            // handle mouse enter/leave events to show/hide the ports
                            mouseEnter: function (e, obj) { showPorts(obj.part, true); },
                            mouseLeave: function (e, obj) { showPorts(obj.part, false); }
                        }
                    ];
                }

                // Define a function for creating a "port" that is normally transparent.
                // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
                // and where the port is positioned on the node, and the boolean "output" and "input" arguments
                // control whether the user can draw links from or to the port.
                function makePort(name, spot, output, input) {
                    // the port is basically just a small circle that has a white stroke when it is made visible
                    return $(go.Shape, "Circle",
                            {
                                fill: "transparent",
                                stroke: null,  // this is changed to "white" in the showPorts function
                                desiredSize: new go.Size(20, 20),
                                alignment: spot, alignmentFocus: spot,  // align the port on the main Shape
                                portId: name,  // declare this object to be a "port"
                                fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                                fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                                cursor: "pointer"  // show a different cursor to indicate potential link point
                            });
                }

                function theInfoTextConverter(info) {
                    //alert(JSON.stringify(info, null, 4));
                    return  info.text + info.key;
                }
                var lightText = 'whitesmoke';
                myDiagram.nodeTemplateMap.add("chain_begin",
                        $(go.Node, "Spot", nodeStyle(),
                                $(go.Panel, "Auto",
                                        $(go.Shape, "Circle",
                                                { minSize: new go.Size(40, 40), fill: "#79C900", stroke: null }),
                                        $(go.TextBlock, "in",
                                                { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                                                new go.Binding("text"))
                                ),
                                // three named ports, one on each side except the top, all output only:
                                //makePort("L", go.Spot.Left, true, false),
                                //makePort("R", go.Spot.Right, true, false),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));

                myDiagram.nodeTemplateMap.add("chain_end",
                        $(go.Node, "Spot", nodeStyle(),
                                $(go.Panel, "Auto",
                                        $(go.Shape, "Circle",
                                                { minSize: new go.Size(40, 40), fill: "#DC3C00", stroke: null }),
                                        $(go.TextBlock, "out",
                                                { font: "bold 11pt Helvetica, Arial, sans-serif", stroke: lightText },
                                                new go.Binding("text"))
                                ),
                                // three named ports, one on each side except the bottom, all input only:
                                makePort("T", go.Spot.Top, false, true)
                                //makePort("L", go.Spot.Left, false, true),
                                //makePort("R", go.Spot.Right, false, true)
                        ));


                // define the Node templates for regular nodes
                {% for nf in networkFunctions  %}
                    myDiagram.nodeTemplateMap.add("{{ nf.role.name }}",  // the default category
                        $(go.Node, "Auto", nodeStyle(), //2

                                // the main object is a Panel that surrounds a TextBlock with a rectangular Shape
                                $(go.Panel, "Auto",
                                        $(go.Shape, "{{ nf.role.shape }}",
                                                {   name: "SHAPE",
                                                    width: 70, height: 70,
                                                    stroke: "{{ nf.role.stroke }}",
                                                    strokeWidth: 3,
                                                    fill: "{{ nf.role.color }}" },
                                                new go.Binding("figure", "figure"),
                                                new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify)//Save the size
                                        ),
                                        $(go.TextBlock,
                                                {
                                                    font: "bold 11pt Helvetica, Arial, sans-serif",
                                                    stroke: '#000000',
                                                    margin: 1,
                                                    alignment: go.Spot.Top,
                                                    maxSize: new go.Size(160, NaN),
                                                    wrap: go.TextBlock.WrapFit,
                                                    editable: true
                                                },
                                                new go.Binding("text").makeTwoWay()

                                        )
                                        {#,
                                        {% set str = '' %}
                                        {% set margin = 15 %}
                                        {% for a in nf.attributes %}
                                            {% set textBlock = '$(go.TextBlock,{font: "11pt Helvetica,Arial, sans-serif",stroke: lightText,margin: %margin%,alignment: go.Spot.Top,maxSize: new go.Size(160, NaN),wrap: go.TextBlock.WrapFit,editable: true},new go.Binding("text", "%a.name%", function(v) { return "%a.name|capitalize%" + v; }).makeTwoWay()),'%}
                                            {% set str = str ~'\n'~(textBlock | replace({'%a.name%': a.name, '%a.name|capitalize%':(a.name | capitalize), '%margin%': margin }) ) %}
                                            {% set margin = margin + 15  %}
                                        {% endfor %}
                                        {% set str = str ~ (str|slice(0, (str|length)-1)) %}
                                        {{ str | raw}}
                                        #}
                                ),
                                // four named ports, one on each side:
                                makePort("T", go.Spot.Top, false, true),
                                makePort("L", go.Spot.Left, true, true),
                                makePort("R", go.Spot.Right, true, true),
                                makePort("B", go.Spot.Bottom, true, false)
                        ));
                {% endfor %}

                myDiagram.nodeTemplateMap.add("Comment",
                        $(go.Node, "Auto", nodeStyle(), //3
                                $(go.Shape, "File",
                                        { fill: "#EFFAB4", stroke: null }
                                ),
                                $(go.TextBlock,
                                        {
                                            margin: 5,
                                            maxSize: new go.Size(200, NaN),
                                            wrap: go.TextBlock.WrapFit,
                                            textAlign: "center",
                                            editable: true,
                                            font: "bold 12pt Helvetica, Arial, sans-serif",
                                            stroke: '#454545'
                                        },
                                        new go.Binding("text").makeTwoWay()),
                                        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify)
                                // no ports, because no links are allowed to connect with a comment
                        ));

                myDiagram.linkTemplate =
                        $(go.Link,
                                { toShortLength: 3, relinkableFrom: true, relinkableTo: true, // allow the user to relink existing links
                                    //routing: go.Link.Orthogonal,
                                    routing: go.Link.AvoidsNodes,
                                    curve: go.Link.JumpOver,
                                    corner: 5, toShortLength: 4,
                                    // mouse-overs subtly highlight links:
                                    mouseEnter: function(e, link) { link.findObject("HIGHLIGHT").stroke = "rgba(30,144,255,0.2)"; },
                                    mouseLeave: function(e, link) { link.findObject("HIGHLIGHT").stroke = "transparent"; }
                                },
                                $(go.Shape,
                                        { strokeWidth: 2 }
                                ),
                                $(go.Shape,
                                        { toArrow: "Standard", stroke: null }
                                )

                        );

                // Make link labels visible if coming out of a "conditional" node.
                // This listener is called by the "LinkDrawn" and "LinkRelinked" DiagramEvents.
                /*function showLinkLabel(e) {
                    var label = e.subject.findObject("LABEL");
                    if (label !== null) label.visible = (e.subject.fromNode.data.figure === "Diamond");
                }*/

                // temporary links used by LinkingTool and RelinkingTool are also orthogonal:
                myDiagram.toolManager.linkingTool.temporaryLink.routing = go.Link.Orthogonal;
                myDiagram.toolManager.relinkingTool.temporaryLink.routing = go.Link.Orthogonal;

                load();  // load an initial diagram from some JSON text

                // initialize the Palette that is on the left side of the page
                myPalette =
                        $(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
                                {
                                    "animationManager.duration": 800, // slightly longer than default (600ms) animation
                                    nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                                    model: new go.GraphLinksModel([  // specify the contents of the Palette
                                        { category: "chain_begin", text: "in" },
                                        { category: "chain_end", text: "out" },
                                        {% set data = '' %}
                                        {% for e in networkFunctions %}
                                            {%  set data = data ~('\n{'
                                            ~'category: "'~e.role.name~'", '
                                            ~'text: "'~e.name~'", ')%}
                                            {% set attr = '' %}
                                            {% for a in e.attributes %}

                                                {%  set attr = attr ~(
                                                    ''~a['name']~': "'~a['value']~'" ,'
                                                )%}
                                            {% endfor %}
                                            {% set data = data ~ (attr|slice(0, (attr|length)-1)) ~ ('},') %}
                                        {% endfor %}
                                        {% set data = data ~ '{ category: "Comment", text: "Comment" }' %}
                                        {{ (data) | raw}}
                                    ])
                                });
                myDiagram.select(myDiagram.nodes.first());
                // support editing the properties of the selected person in HTML
                //var str = getFromInfo(-1);
                if (window.Inspector) myInspector = new Inspector(
                        'myInspector', myDiagram,
                        {
                            properties: {
                                'key': { readOnly: true , show: false},
                                'category': { readOnly: true ,  show: Inspector.showIfNode},
                                'loc': { readOnly: true , show: false},
                                'size': { readOnly: true , show: false},
                                'from':{readOnly: true, show: false},
                                'to':{readOnly: true, show: false},
                                //"binding": { readOnly: true , show: Inspector.showIfLink},
                                //"link": { readOnly: true , show: Inspector.showIfLink},
                                "latency": { readOnly: false , show: Inspector.showIfLink},
                                "bandwidth": { readOnly: false , show: Inspector.showIfLink},

                                'fromPort': {readOnly: true, show: false},
                                'toPort': {readOnly: true, show: false}

                            }

                        }
                );

                function getFromInfo(info) {
                    var str = "";
                    //alert(info);
                    if (typeof info === "number") {
                        var fromInfo = myDiagram.model.findNodeDataForKey(info);
                        //alert(fromInfo);
                        if (fromInfo !== null) {
                            str =  fromInfo.name;
                        }
                    }
                    return str;
                }


            }

    // Make all ports on a node visible when the mouse is over the node
    function showPorts(node, show) {
        var diagram = node.diagram;
        if (!diagram || diagram.isReadOnly || !diagram.allowLink) return;
        node.ports.each(function(port) {
            port.stroke = (show ? "white" : null);
        });
    }


    // Show the diagram's model in JSON format that the user may edit
    function save() {
        document.getElementById("networkconfig_config_value").value = myDiagram.model.toJson();
        myDiagram.isModified = false;
    }
    function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("networkconfig_config_value").value);
    }

    // add an SVG rendering of the diagram at the end of this page
    function makeSVG() {
        var svg = myDiagram.makeSvg({
            scale: 0.5
        });
        svg.style.border = "1px solid black";
        obj = document.getElementById("SVGArea");
        obj.appendChild(svg);
        if (obj.children.length > 0) {
            obj.replaceChild(svg, obj.children[0]);
        }
    }
</script>


{% endblock %}