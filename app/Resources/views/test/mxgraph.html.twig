{% extends 'base.html.twig' %}

{% block body_events %}onload="main(document.getElementById('graphContainer'))"{% endblock %}

{% block body %}
    <!-- Creates a container for the graph with a grid wallpaper -->
    <div id="graphContainer"
         style=" position:relative;
                 overflow:auto;
                 width:100%;
                 height:300px;
                 background:url('{{ asset('bundles/app/js/mxgraph/javascript/src/images/grid.gif') }}');
                 cursor:default;">
    </div>
{% endblock %}

{% block head %}
    <!-- Sets the basepath for the library if not in same directory -->
    <script type="text/javascript">
        mxBasePath = '{{ asset('bundles/app/js/mxgraph/javascript/src') }}';
    </script>
    <!-- Loads and initializes the library -->
    <script type="text/javascript" src="{{ asset('bundles/app/js/mxgraph/javascript/src/js/mxClient.js') }}"></script>

    <!-- Example code -->
    <script type="text/javascript">
        // Program starts here. This function is invoked
        // from the onLoad event handler of the document.
        function main(container)
        {
            // Checks if the browser is supported
            if (!mxClient.isBrowserSupported())
            {
                // Displays an error message if the browser is not supported.
                mxUtils.error('Browser is not supported!', 200, false);
            }
            else
            {
                // Disables the built-in context menu
                 mxEvent.disableContextMenu(container);

                // Creates the graph inside the given container
                var graph = new mxGraph(container);

                // Enables rubberband selection
                new mxRubberband(graph);

                // Gets the default parent for inserting new cells. This
                // is normally the first child of the root (ie. layer 0).
                var parent = graph.getDefaultParent();

                // Adds cells to the model in a single step
                graph.getModel().beginUpdate();

                var vertexStyle = graph.getStylesheet().getDefaultVertexStyle();
                vertexStyle[mxConstants.ROUNDED] = true;

                var edgeStyle = graph.getStylesheet().getDefaultEdgeStyle();
                edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.TopToBottom;


                try
                {
                    var v1 = graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'rounded;strokeColor=blue;fillColor=yellow');
                    var v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);
                    var e1 = graph.insertEdge(parent, null, '', v1, v2);





                }
                finally
                {
                    // Updates the display
                    graph.getModel().endUpdate();
                }
            }
        };
    </script>
{% endblock %}